import React, { useState } from 'react';
import { GoogleGenAI } from "@google/genai";
import { fetchAdvisories } from '../services/rssService';
import { LoadingSpinner } from './LoadingSpinner';
import { ErrorMessage } from './ErrorMessage';
import { BugAntIcon } from '../components/Icons';

const exampleComposerJson = `{
    "name": "goalgorilla/open_social",
    "description": "Open Social is a distribution for building social communities and intranets.",
    "license": "GPL-2.0-or-later",
    "type": "drupal-profile",
    "require": {
        "php": "^8.1",
        "composer/installers": "~1.0 || ~2.0",
        "cweagans/composer-patches": "^1.6.0",
        "drupal/address": "^1.12.0 || ^2.0.1",
        "drupal/admin_toolbar": "3.6.2",
        "drupal/advancedqueue": "^1.3",
        "drupal/ajax_comments": "1.0.0-beta6",
        "drupal/better_exposed_filters": "7.0.5",
        "drupal/block_field": "1.0.0-rc5",
        "drupal/bootstrap": "3.34",
        "drupal/ckeditor": "1.0.2",
        "drupal/core": "10.5.1",
        "drupal/core-composer-scaffold": "10.5.1",
        "drupal/group": "2.3.1",
        "drupal/views_bulk_operations": "4.3.4",
        "drupal/token": "1.15.0"
    }
}`;

export const VulnerabilityChecker: React.FC = () => {
    const [composerJson, setComposerJson] = useState(exampleComposerJson);
    const [analysisResult, setAnalysisResult] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const handleAnalyze = async () => {
        if (!composerJson.trim()) {
            setError('Please paste your composer.json content.');
            return;
        }

        setIsLoading(true);
        setError(null);
        setAnalysisResult('');

        try {
            // 1. Fetch first 20 advisories
            const advisories = await fetchAdvisories('all');
            const recentAdvisories = advisories.slice(0, 20);
            
            // Check if API key exists in environment variables
            const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
            if (!apiKey) {
                throw new Error('Gemini API key not found. Please add VITE_GEMINI_API_KEY to your .env file.');
            }

                        // 2. Initialize Gemini AI
            const ai = new GoogleGenAI({ apiKey });

            // 3. Construct the prompt
            const prompt = `
You are an expert Drupal security analyst. Your task is to analyze the provided composer.json file against a list of the 20 most recent Drupal security advisories.

**Instructions:**
1. Parse the 'require' section of the composer.json file to identify project dependencies.
2. **Analyze ONLY Drupal contrib modules.** These are packages that start with 'drupal/'. You must completely IGNORE the following types of packages:
   - Drupal core packages, such as 'drupal/core', 'drupal/core-recommended', 'drupal/core-composer-scaffold', and 'drupal/core-project-message'.
   - Drupal themes, such as 'drupal/bootstrap'.
   - Drupal profiles, such as 'goalgorilla/open_social'.
   - Any non-Drupal packages, such as 'composer/installers', 'cweagans/composer-patches', 'drush/drush', or anything from 'npm-asset/'.
Your analysis should ONLY focus on packages like 'drupal/token', 'drupal/views_bulk_operations', etc.
3. Compare the identified contrib module dependencies with the provided list of security advisories.
4. Identify any packages that are mentioned in the advisories and may be a vulnerability. Pay close attention to version constraints mentioned in the composer.json.
5. Provide a concise report in Markdown format. Start with a summary, then list potentially vulnerable packages with a brief explanation and the advisory title.
6. If no vulnerabilities are found from the provided list for the contrib modules, state that clearly.
7. The report should be easy to read for a developer.

**composer.json content:**
\`\`\`json
${composerJson}
\`\`\`

**Recent Security Advisories:**
${recentAdvisories
  .map(
    (advisory) => `- **${advisory.title}**: ${advisory.description.replace(/<[^>]*>?/gm, ' ').replace(/\s\s+/g, ' ').trim()}`
  )
  .join('\n')}

**Analysis Report:**
`;

            // 4. Call the AI model
            const response = await ai.models.generateContent({
                model: 'gemini-2.5-flash',
                contents: prompt,
            });

            if (!response) {
                throw new Error("Received an empty response from the AI model.");
            }

            setAnalysisResult(response.text);

        } catch (err) {
            console.error("Analysis failed:", err);
            const message = err instanceof Error ? err.message : 'An unknown error occurred during analysis.';
            setError(`Failed to analyze. ${message}`);
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <section className="space-y-8">
            <header className="py-8">
              <div className="flex items-center space-x-4 mb-4">
                 <div className="bg-red-50 dark:bg-red-900/10 p-3 rounded-xl border border-red-100 dark:border-red-900/20">
                    <BugAntIcon className="h-10 w-10 stroke-2 text-red-600 dark:text-red-500"/>
                 </div>
                 <div>
                    <p className="text-sm font-medium text-zinc-600 dark:text-zinc-400 mb-1">AI Powered</p>
                    <h1 className="text-4xl sm:text-5xl font-bold tracking-tight text-zinc-900 dark:text-zinc-100">
                        Vulnerability Checker
                    </h1>
                 </div>
              </div>
              <p className="text-zinc-600 dark:text-zinc-400 max-w-2xl">
                Paste your project's <code>composer.json</code> content below. The AI will cross-reference your dependencies with the latest 20 security advisories to identify potential risks.
              </p>
            </header>
            
            <div className="space-y-4">
                <label htmlFor="composer-json" className="block text-sm font-medium text-zinc-700 dark:text-zinc-300">
                    Your composer.json file
                </label>
                <textarea
                    id="composer-json"
                    rows={15}
                    value={composerJson}
                    onChange={(e) => setComposerJson(e.target.value)}
                    placeholder='{
    "name": "drupal/recommended-project",
    "require": {
        "drupal/core": "10.1.0",
        "..."
    }
}'
                    className="w-full p-4 bg-zinc-100 dark:bg-zinc-900 border border-zinc-200 dark:border-zinc-800 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none font-mono text-sm"
                    aria-label="composer.json content"
                />
            </div>

            <div>
                <button
                    onClick={handleAnalyze}
                    disabled={isLoading}
                    className="w-full sm:w-auto inline-flex items-center justify-center px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-black disabled:bg-blue-400 dark:disabled:bg-blue-800 disabled:cursor-not-allowed transition-colors"
                >
                    {isLoading ? (
                        <>
                            <div role="status" aria-label="Loading">
                                <LoadingSpinner className="h-5 w-5 text-white" />
                                <span className="sr-only">Loading...</span>
                            </div>
                            <span className="ml-2">Analyzing...</span>
                        </>
                    ) : (
                        'Analyze for Vulnerabilities'
                    )}
                </button>
            </div>

            {error && <ErrorMessage message={error} />}

            {analysisResult && (
                <div className="space-y-4 pt-4">
                     <h2 className="text-2xl font-bold tracking-tight">Analysis Result</h2>
                    <div className="bg-zinc-100 dark:bg-zinc-900 p-4 sm:p-6 rounded-lg border border-zinc-200 dark:border-zinc-800">
                        <pre className="whitespace-pre-wrap break-words font-sans text-zinc-800 dark:text-zinc-200 text-base leading-relaxed">{analysisResult}</pre>
                    </div>
                </div>
            )}
        </section>
    );
};